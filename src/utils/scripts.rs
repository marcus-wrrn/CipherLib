use crate::utils::file_operations;
use crate::ciphers::block_ciphers::sdes;

pub fn load_default_subbox() -> sdes::SBoxes {
    let s1_box: [[u8; 16]; 4] = [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
    ];

    let s2_box: [[u8; 16]; 4] = [
        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],  // 0yyyy0
        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],  // 0yyyy1
        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],  // 1yyyy0
        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],  // 1yyyy1
    ];

    let s3_box: [[u8; 16]; 4] = [
        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],  // 0yyyy0
        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],  // 0yyyy1
        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],  // 1yyyy0
        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],  // 1yyyy1
    ];

    let s4_box: [[u8; 16]; 4] = [
        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],  // 0yyyy0
        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],  // 0yyyy1
        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],  // 1yyyy0
        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],  // 1yyyy1
    ];


    let s5_box: [[u8; 16]; 4] = [
        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],  // 0yyyy0
        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],  // 0yyyy1
        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],  // 1yyyy0
        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],  // 1yyyy1
    ];


    let s6_box: [[u8; 16]; 4] = [
        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],  // 0yyyy0
        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],  // 0yyyy1
        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],  // 1yyyy0
        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],  // 1yyyy1
    ];


    let s7_box: [[u8; 16]; 4] = [
        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],  // 0yyyy0
        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],  // 0yyyy1
        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],  // 1yyyy0
        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],  // 1yyyy1
    ];


    let s8_box: [[u8; 16]; 4] = [
        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],  // 0yyyy0
        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],  // 0yyyy1
        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],  // 1yyyy0
        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],  // 1yyyy1
    ];

    sdes::SBoxes::from(vec![
        sdes::SBox::from(s1_box),
        sdes::SBox::from(s2_box),
        sdes::SBox::from(s3_box),
        sdes::SBox::from(s4_box),
        sdes::SBox::from(s5_box),
        sdes::SBox::from(s6_box),
        sdes::SBox::from(s7_box),
        sdes::SBox::from(s8_box),
    ])
}

pub fn initialize_substitution_blocks(filename: &str) -> bool {
    let boxes = load_default_subbox();

    let result = match file_operations::save_substitution_boxes_to_file(boxes, filename) {
        Ok(_) => {
            println!("Substitution boxes saved successfully.");
            true
        },
        Err(e) => {
            eprintln!("Failed to save substitution boxes: {}", e);
            false
        },
    };

    result
}